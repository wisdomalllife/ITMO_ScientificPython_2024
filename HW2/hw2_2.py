# -*- coding: utf-8 -*-
"""HW2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjf4dj1bwMGWXPoNydzAnw7_uL6Fb3OV

## Packages
"""

! pip install biopython

! pip install -q condacolab
import condacolab
condacolab.install()

! conda install -c bioconda seqkit

import subprocess
import requests
from Bio import SeqIO
import re
import json

"""## Seqkit stats"""

def seqkit(file):
  seqkit = subprocess.run(("seqkit", "stats", file, "-a"),
                            capture_output=True, # When set to True, will capture the standard output and standard error
                            text=True) # When set to True, will return the stdout and stderr as string, otherwise as bytes
  if seqkit.stderr != '':
    return seqkit.stderr, 'invalid'
  out = seqkit.stdout.strip().split('\n')
  result = dict(zip(out[0].split()[1:], out[1].split()[1:]))
  return result, result['type']

"""testing"""

#seqkit('hw_file1.fasta')
seqkit('hw_file2.fasta')
#seqkit('hw_file3.fasta')

"""## Biopython parser

regular expressions
"""

#Uniprot:
reuni = '[OPQ][0-9][A-Z0-9]{3}[0-9]|[A-NR-Z][0-9]([A-Z][A-Z0-9]{2}[0-9]){1,2}'

#ENSEMBL:
resem = 'ENS[A-Z]{1,6}[0-9]{11}|MGP_[A-Za-z0-9]{2,10}_(E|G|P|R|T|GT|FM)[0-9]+'

def parser(file, ftype):
  res = []
  descr = []
  sequ = []
  DB = ''
  sequences = SeqIO.parse(file, 'fasta')
  if ftype == 'DNA':
    DB = 'ENSEMBL'
    for seq in sequences:
      gene = seq.id.split('.')[0]
      if bool(re.match(resem, gene)):
        res.append(gene)
        descr.append(seq.description)
        sequ.append(seq.seq)
  if ftype == 'Protein':
    DB = 'Uniprot'
    for seq in sequences:
      gene = seq.id.split('|')[1]
      if bool(re.match(reuni, gene)):
        res.append(gene)
        descr.append(seq.description)
        sequ.append(seq.seq)
  return sequ, descr, res, DB

"""testing"""

#descr, res, DB = parser('hw_file1.fasta', 'Protein')
seq, descr, res, DB = parser('hw_file2.fasta', 'DNA')
print(res)
print(descr)

"""## API call"""

def get_uniprot(ids: list):
  accessions = ','.join(ids)
  endpoint = "https://rest.uniprot.org/uniprotkb/accessions"
  http_args = {'params': {'accessions': accessions}}
  return requests.get(endpoint, **http_args)

def get_ensembl(ids: list):
  id = json.dumps({'ids': ids})
  endpoint = "https://rest.ensembl.org/lookup/id"
  headers={ "Content-Type" : "application/json", "Accept" : "application/json"}
  http_function = requests.post
  http_args = {'headers': headers,'data': id}
  return http_function(endpoint, **http_args)

def uniprot_parse_response(resp: dict):
    resp = resp.json()
    resp = resp["results"]
    output = {}
    for val in resp:
        acc = val['primaryAccession']
        species = val['organism']['scientificName']
        gene = val['genes']
        seq = val['sequence']
        output[acc] = {'organism':species, 'geneInfo':gene, 'sequenceInfo':seq, 'type':'protein'}

    return output

def ensembl_parse_response(resp: dict):
    resp = resp.json()
    output = {}
    for key,value in resp.items():
        species = resp[key]['species']
        otype = resp[key]['object_type']
        biotype = resp[key]['biotype']
        start = resp[key]['start']
        end = resp[key]['end']
        output[key] = {'organism':species, 'start': start, 'end': end, 'object_type':otype, 'biotype':biotype}
    return output

"""testing"""

#res = get_uniprot(res)
#uniprot_parse_response(res)
res = get_ensembl(res)
#res.json()
ensembl_parse_response(res)

"""## finall call"""

def parse_response(file):
  stats, ftype = seqkit(file)
  if ftype == 'invalid':
     return stats
  seq, descr, ids, DB = parser(file, ftype)
  if DB == 'Uniprot':
    resp = get_uniprot(ids)
    output = uniprot_parse_response(resp)
  elif DB == 'ENSEMBL':
    resp = get_ensembl(ids)
    output = ensembl_parse_response(resp)
  res = dict(zip(ids, zip(seq, descr)))
  print("---------statistics---------")
  [print(f"{key}: {value}") for key, value in stats.items()]
  print("---------info---------")
  for key in res.keys():
    print(f'ID: {key}')
    print(f'descr: {res[key][1]}')
    print(f'sequence: {res[key][0]}')
    print(f'DATABASE: {DB}')
    [print(f"{key}: {value}") for key, value in output[key].items()]
    print("------------------")
  return

"""testing"""

#parse_response('hw_file1.fasta')
parse_response('hw_file2.fasta')
#parse_response('hw_file3.fasta')